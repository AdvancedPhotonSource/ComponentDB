<?xml version="1.0" encoding="UTF-8" ?>
<!--
Copyright (c) UChicago Argonne, LLC. All rights reserved.
See LICENSE file.
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"                                
                xmlns:p="http://primefaces.org/ui"
                xmlns:f="http://xmlns.jcp.org/jsf/core">   

    <ui:param name="dualConfigurationViewEnabled"
              value="#{entityController.displayListConfigurationView}"/>

    <div id="dualConfigurationViewEnabled" style="display: none;">#{dualConfigurationViewEnabled}</div>
    <script type="text/javascript">

        var scrollCheckTimer = null;

        function handleMousemove(event) {
            var scrollPanel = document.getElementById('itemMachineDesignListForm:itemDomainMachineDesignReorderScrollPanel');
            if (scrollPanel !== null) {
                var browserHeight = document.documentElement.clientHeight;
                var panelHeight = scrollPanel.clientHeight;

                var paddingSize = (browserHeight - panelHeight) / 2;

                var lowerLimit = panelHeight + paddingSize;
                var upperLimit = paddingSize;

                (function checkForWindowScroll() {

                    clearTimeout(scrollCheckTimer);

                    if (adjustWindowScroll()) {

                        scrollCheckTimer = setTimeout(checkForWindowScroll, 30);

                    }

                })();

                function adjustWindowScroll() {
                    var newScroll = null;
                    var clientY = event.clientY;
                    var curScroll = scrollPanel.scrollTop;
                    if (clientY > lowerLimit) {
                        newScroll = curScroll + (clientY - lowerLimit) / 4;
                    } else if (upperLimit > clientY) {
                        newScroll = curScroll - (upperLimit - clientY) / 4;
                    }

                    if (newScroll != null) {
                        scrollPanel.scrollTo(0, newScroll);
                        return true;
                    }
                    return false;
                }
            }
        }

        function scrollReorderConfigureListender(apply) {
            if (apply) {
                window.addEventListener("mousemove", handleMousemove);
            } else {
                window.removeEventListener("mousemove", handleMousemove);
            }
        }
        
        dualConfigurationViewDisabled = document.getElementById('dualConfigurationViewEnabled').innerHTML == 'false';
        if (dualConfigurationViewDisabled) {
            scrollToSelectedNode();
        } else {
            defined_height = document.getElementById("itemMachineDesignListDataTableScrollHeight").innerHTML;

            if (defined_height.includes('vh')) {                
                vh_unit_str = defined_height.split('vh')[0]
                tree_height_multiplier = parseFloat(vh_unit_str) / 100;

                body_height = document.getElementsByTagName("body")[0].offsetHeight;
                expected_tree_height = body_height * tree_height_multiplier;
                expected_tree_height = Math.round(expected_tree_height); 

                tree_table_scroll_body = document.querySelector("#itemMachineDesignListForm\\:itemMachineDesignListDataTable > div.ui-treetable-scrollable-body");
                initial_tree_height = tree_table_scroll_body.offsetHeight;

                if (initial_tree_height > expected_tree_height) {
                    // Wait until the height is expected height. 25 tries at 80 ms is 2 seconds. 
                    height_update_attempts = 25;
                    function try_again() {
                        if (height_update_attempts > 0) {
                            setTimeout(() => {                                
                                tree_height = tree_table_scroll_body.offsetHeight
                                
                                if (expected_tree_height === tree_height) {
                                    scrollToSelectedNode(); 
                                } else {
                                    height_update_attempts--;
                                    try_again();
                                } 
                            }, "80");
                        }
                    }
                    try_again();
                } else {
                    // The tree is less height or equal. Attempt to scroll. 
                    scrollToSelectedNode(); 
                }

            } else {
                console.warn("Autoscroll disabled unless tree scroll height is defined in 'vh' units.")
            }
        }

        function scrollToSelectedNode() {
            selectedRows = document.getElementsByClassName('ui-state-highlight ui-selected ui-treetable-selectable-node');
            if (selectedRows.length > 0) {
                row = selectedRows[0];
                row.scrollIntoView({'behavior': 'smooth', 'block': 'center'});
            }
        }

        function getMachineDesignId(dragDropId) {
            var index = dragDropId.lastIndexOf(":");

            var baseId = dragDropId.substring(0, index) + ":draggableMachineDesign";

            var rowItem = document.getElementById(baseId);
            idItem = rowItem.getElementsByClassName("mdId")[0];
            nameItem = rowItem.getElementsByClassName("mdName")[0];

            return [idItem.innerHTML, nameItem.innerHTML];
        }


        function handleDrop(event, ui) {
            var draggable = ui.draggable[0];

            var draggableId = draggable.id;
            var droppableId = this.id;

            var source = getMachineDesignId(draggableId);
            var destination = getMachineDesignId(droppableId);

            window.sourceDDId = source[0];
            window.destinationDDId = destination[0];
            var sourceName = source[1];
            var destinationName = destination[1];

            var message = "Would you like to move <b>" + sourceName + "</b> into <b>" + destinationName + "</b>?";
            document.getElementById('machineDesignDropConfirmDialogMessage').innerHTML = message;

            PF('machineDesignDropConfirmDialogWidget').show();
        }

        function finishDrop() {
            machineDesignDropEventTrigger([
                {name: 'sourceId', value: window.sourceDDId},
                {name: 'destinationId', value: window.destinationDDId}
            ]);
        }

        // TODO verify if fix is needed after Primefaces 6.2
        // https://forum.primefaces.org/viewtopic.php?t=26813

        var lastOpenedWidget;
        var currentEvent;

        function showLastContextMenu() {
            if (lastOpenedWidget != null) {
                PF(lastOpenedWidget).show(currentEvent);
            }
            lastOpenedWidget = null;
            currentEvent = null;
        }

        $(document).ready(function () {
            PrimeFaces.widget.ContextMenu.prototype.show = function (e) {
                //hide other contextmenus if any
                $(document.body).children('.ui-contextmenu:visible').hide();

                if (e) {
                    currentEvent = e;
                }

                var win = $(window),
                        left = e.pageX,
                        top = e.pageY,
                        width = this.jq.outerWidth(),
                        height = this.jq.outerHeight();

                //collision detection for window boundaries
                if ((left + width) > (win.width()) + win.scrollLeft()) {
                    left = left - width;
                }
                if ((top + height) > (win.height() + win.scrollTop())) {
                    top = top - height;
                }

                if (this.cfg.beforeShow) {
                    this.cfg.beforeShow.call(this);
                }

                lastOpenedWidget = this.jq[0].id;
                lastOpenedWidget = lastOpenedWidget.split(":");
                lastOpenedWidget = lastOpenedWidget[lastOpenedWidget.length - 1];
                lastOpenedWidget = lastOpenedWidget + "Widget";

                this.jq.css({
                    'left': left,
                    'top': top,
                    'z-index': ++PrimeFaces.zindex
                }).show();

                e.preventDefault();
            };
        });
    </script>

    <p:confirmDialog widgetVar="machineDesignDropConfirmDialogWidget"
                     styleClass="viewTransparentBackgroundDialog"
                     header="Confirm moving Machine Element?">
        <f:facet name="message">
            <div id="machineDesignDropConfirmDialogMessage"></div>
        </f:facet>
        <p:commandButton value="Yes"
                         onclick="finishDrop()"/>
        <p:commandButton value="No"
                         update="@form"
                         onstart="PF('loadingDialog').show()"
                         onclick="PF('machineDesignDropConfirmDialogWidget').hide()"
                         oncomplete="PF('loadingDialog').hide()"/>
    </p:confirmDialog>


    <p:remoteCommand name="machineDesignDropEventTrigger"
                     action="#{entityController.onDropFromJS}"
                     onstart="PF('loadingDialog').show();"
                     oncomplete="PF('loadingDialog').hide();"
                     update="@form"/> 


</ui:composition>


