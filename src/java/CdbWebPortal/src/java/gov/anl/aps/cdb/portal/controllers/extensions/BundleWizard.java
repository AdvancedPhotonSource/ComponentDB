/*
 * Copyright (c) UChicago Argonne, LLC. All rights reserved.
 * See LICENSE file.
 */
package gov.anl.aps.cdb.portal.controllers.extensions;

import gov.anl.aps.cdb.portal.controllers.ItemDomainCableDesignWizardBase;
import gov.anl.aps.cdb.portal.model.db.entities.Item;
import gov.anl.aps.cdb.portal.utilities.SessionUtility;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.enterprise.context.SessionScoped;
import javax.faces.event.ValueChangeEvent;
import javax.inject.Named;

/**
 * Controller for adding cable bundles.
 *
 * @author cmcchesney
 */
@Named(BundleWizard.CONTROLLER_NAMED)
@SessionScoped
public class BundleWizard extends ItemDomainCableDesignWizardBase implements Serializable {

    public class CableTypeSpareInfo {

        private Item cableType = null;
        private int quantity = 0;
        
        public CableTypeSpareInfo(Item type, int qty) {
            this.cableType = type;
            this.quantity = qty;
        }
        
        @Override
        public int hashCode() {
            if (cableType == null) {
                return 0;
            } else {
                return cableType.getName().hashCode();
            }
        }

        @Override
        public boolean equals(Object object) {
            if (cableType == null) {
                return false;
            } else {
                if (!(object instanceof CableTypeSpareInfo)) {
                    return false;
                }
                CableTypeSpareInfo infoObject = (CableTypeSpareInfo)object;
                if (infoObject == null) {
                    return false;
                } else {
                    return cableType.getName().equals(infoObject.getName());
                }
            }
        }

        public Item getCableType() {
            return cableType;
        }

        public void setCableType(Item cableType) {
            this.cableType = cableType;
        }
        
        public String getName() {
            if (cableType == null) {
                return "";
            } else {
                return cableType.getName();
            }
        }

        public int getQuantity() {
            return quantity;
        }

        public void setQuantity(int quantity) {
            this.quantity = quantity;
        }
    }
    
    public class SparesDialog {

        private Item selectionModelCableType = null;
        private int valueModelQuantity = 0;
        private Boolean disableButtonSelect = true;

        public Item getSelectionModelCableType() {
            return selectionModelCableType;
        }

        public void setSelectionModelCableType(Item selectionModelCableType) {
            this.selectionModelCableType = selectionModelCableType;
        }

        public int getValueModelQuantity() {
            return valueModelQuantity;
        }

        public void setValueModelQuantity(int valueModelQuantity) {
            this.valueModelQuantity = valueModelQuantity;
        }
        
        public void valueChangeListenerQuantity(ValueChangeEvent e) {
            setEnablement();
        }

        public void ajaxListenerQuantity() {
            setEnablement();
        }

        public Boolean getDisableButtonSelect() {
            return disableButtonSelect;
        }

        public void setDisableButtonSelect(Boolean disableButtonSelect) {
            this.disableButtonSelect = disableButtonSelect;
        }

        /**
         * Handles select events generated by the data table component.
         */
        public void selectListenerCableType() {
            setEnablement();
        }

        public void actionListenerSelectSuccess() {
        }

        /**
         * Resets the dialog components when closing.
         */
        public void reset() {
            setSelectionModelCableType(null);
            setValueModelQuantity(0);
            setEnablement();
        }

        /**
         * Enables save button when a valid selection is made.
         */
        private void setEnablement() {

            if ((selectionModelCableType != null) && (valueModelQuantity > 0)) {
                disableButtonSelect = false;
            } else {
                disableButtonSelect = true;
            }
        }

        /**
         * Handles selected cables for dialog's select button.
         */
        public String select(String remoteCommandSuccess) {
            
            if (valueModelQuantity <= 0)
            {
                SessionUtility.addErrorMessage(
                        "Could not process dialog",
                        "Please enter quantity > 0.");
            } else if (selectionModelCableType == null) {
                SessionUtility.addErrorMessage(
                        "Could not process dialog",
                        "Please select cable type.");
            } else {
                addCableType(selectionModelCableType, getValueModelQuantity());
                SessionUtility.executeRemoteCommand(remoteCommandSuccess);
            }
            return null;
        }

        public void cancel() {
        }

    }

    public static final String CONTROLLER_NAMED = "bundleWizard";
    protected static final String tabBundleOptions = "BundleOptionsTab";
    protected static final String tabSpares = "SparesTab";

    protected boolean addMembers = false;
    protected boolean createSpares = false;
    private List<CableTypeSpareInfo> spares = new ArrayList<>();
    protected SparesDialog dialogSpares = new SparesDialog();

    public static BundleWizard getInstance() {
        return (BundleWizard) SessionUtility.findBean(BundleWizard.CONTROLLER_NAMED);
    }

    public boolean isAddMembers() {
        return addMembers;
    }

    public void setAddMembers(boolean addMembers) {
        this.addMembers = addMembers;
    }

    public boolean isCreateSpares() {
        return createSpares;
    }

    public void setCreateSpares(boolean createSpares) {
        this.createSpares = createSpares;
    }

    public List<CableTypeSpareInfo> getSpares() {
        return spares;
    }
    
    /**
     * Returns number of spare cables.
     */
    public int getSparesCount() {
        int count = 0;
        for (CableTypeSpareInfo info : spares) {
            count = count + (info.quantity);
        }
        return count;
    }

    /**
     * Handles select events generated by the "add existing cables" checkbox.
     */
    public void selectListenerAddMembers() {
        setEnablementForCurrentTab();
    }

    /**
     * Handles select events generated by the "add spares" checkbox.
     */
    public void selectListenerCreateSpares() {
        setEnablementForCurrentTab();
    }

    public void addCableType(Item cableType, int qty) {
        CableTypeSpareInfo cableTypeSpareInfo = new CableTypeSpareInfo(cableType, qty);
        getSpares().add(cableTypeSpareInfo);
        setEnablementForCurrentTab();
    }
    
    public void removeCableType(CableTypeSpareInfo cableTypeInfo) {
        spares.remove(cableTypeInfo);
        setEnablementForCurrentTab();
    }

    public SparesDialog getDialogSpares() {
        return dialogSpares;
    }

    public void setDialogSpares(SparesDialog dialogSpares) {
        this.dialogSpares = dialogSpares;
    }

    public void prepareDialogSpares() {
        getDialogSpares().reset();
    }

    /**
     * Resets models for wizard components.
     */
    @Override
    protected void reset_() {
        addMembers = false;
        createSpares = false;
        spares.clear();
    }

    /**
     * Returns custom tab navigation based on wizard state. Subclass should
     * override for custom behavior.
     */
    @Override
    public String nextTab_(String currStep, String nextStep) {

        String nextTab = nextStep;

        if ((currStep.endsWith(tabBundleOptions)) && (nextStep.endsWith(tabMembers))) {

            // figure out next step navigating forward from bundle options tab
            if (isAddMembers()) {
                nextTab = CONTROLLER_NAMED + tabMembers;
            } else {
                nextTab = CONTROLLER_NAMED + tabSpares;
            }

        } else if ((currStep.endsWith(tabMembers)) && (nextStep.endsWith(tabSpares))) {

            // figure out next step navigating forward from members tab
            if (isCreateSpares()) {
                nextTab = CONTROLLER_NAMED + tabSpares;
            } else {
                nextTab = CONTROLLER_NAMED + tabReview;
            }

        } else if ((currStep.endsWith(tabReview)) && (nextStep.endsWith(tabSpares))) {

            // figure out next step navigating backward from review tab
            if (isCreateSpares()) {
                nextTab = CONTROLLER_NAMED + tabSpares;
            } else {
                nextTab = CONTROLLER_NAMED + tabMembers;
            }

        } else if ((currStep.endsWith(tabSpares)) && (nextStep.endsWith(tabMembers))) {

            // figure out next step navigating backward from spares tab
            if (isAddMembers()) {
                nextTab = CONTROLLER_NAMED + tabMembers;
            } else {
                nextTab = CONTROLLER_NAMED + tabBundleOptions;
            }

        }


        return nextTab;
    }

    /**
     * Sets enable/disable state for the navigation buttons based on the current
     * tab and input elements.
     */
    @Override
    protected void setEnablement_(String tab) {

        if (tab.endsWith(tabBundleOptions)) {
            disableButtonCancel = false;
            disableButtonSave = true;
            if (addMembers || createSpares) {
                disableButtonNext = false;
            } else {
                disableButtonNext = true;
            }
        } else if (tab.endsWith(tabSpares)) {
            disableButtonCancel = false;
            disableButtonSave = true;
            if (spares.size() > 0) {
                disableButtonNext = false;
            } else {
                disableButtonNext = true;
            }
        }

    }

    /**
     * Implements the save operation, invoked by the wizard's "Save" navigation
     * button.
     */
    public String save() {

        SessionUtility.addErrorMessage(
                "Could not save cable bundle",
                "Feature not yet implemented.");
        return "";
    }

}
