# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.12.3
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class ItemDomainMachineDesignAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'membership_loaded': 'bool',
        'move_to_trash_error_msg': 'str',
        'move_to_trash_warning_msg': 'str',
        'alternate_name': 'str',
        'assigned_item': 'Item',
        'is_housed': 'bool',
        'status_property_type_name': 'str',
        'assigned_represented_element': 'ItemElement',
        'move_to_trash_row_style': 'str'
    }

    attribute_map = {
        'membership_loaded': 'membershipLoaded',
        'move_to_trash_error_msg': 'moveToTrashErrorMsg',
        'move_to_trash_warning_msg': 'moveToTrashWarningMsg',
        'alternate_name': 'alternateName',
        'assigned_item': 'assignedItem',
        'is_housed': 'isHoused',
        'status_property_type_name': 'statusPropertyTypeName',
        'assigned_represented_element': 'assignedRepresentedElement',
        'move_to_trash_row_style': 'moveToTrashRowStyle'
    }

    def __init__(self, membership_loaded=None, move_to_trash_error_msg=None, move_to_trash_warning_msg=None, alternate_name=None, assigned_item=None, is_housed=None, status_property_type_name=None, assigned_represented_element=None, move_to_trash_row_style=None, local_vars_configuration=None):  # noqa: E501
        """ItemDomainMachineDesignAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._membership_loaded = None
        self._move_to_trash_error_msg = None
        self._move_to_trash_warning_msg = None
        self._alternate_name = None
        self._assigned_item = None
        self._is_housed = None
        self._status_property_type_name = None
        self._assigned_represented_element = None
        self._move_to_trash_row_style = None
        self.discriminator = None

        if membership_loaded is not None:
            self.membership_loaded = membership_loaded
        if move_to_trash_error_msg is not None:
            self.move_to_trash_error_msg = move_to_trash_error_msg
        if move_to_trash_warning_msg is not None:
            self.move_to_trash_warning_msg = move_to_trash_warning_msg
        if alternate_name is not None:
            self.alternate_name = alternate_name
        if assigned_item is not None:
            self.assigned_item = assigned_item
        if is_housed is not None:
            self.is_housed = is_housed
        if status_property_type_name is not None:
            self.status_property_type_name = status_property_type_name
        if assigned_represented_element is not None:
            self.assigned_represented_element = assigned_represented_element
        if move_to_trash_row_style is not None:
            self.move_to_trash_row_style = move_to_trash_row_style

    @property
    def membership_loaded(self):
        """Gets the membership_loaded of this ItemDomainMachineDesignAllOf.  # noqa: E501


        :return: The membership_loaded of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._membership_loaded

    @membership_loaded.setter
    def membership_loaded(self, membership_loaded):
        """Sets the membership_loaded of this ItemDomainMachineDesignAllOf.


        :param membership_loaded: The membership_loaded of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :type: bool
        """

        self._membership_loaded = membership_loaded

    @property
    def move_to_trash_error_msg(self):
        """Gets the move_to_trash_error_msg of this ItemDomainMachineDesignAllOf.  # noqa: E501


        :return: The move_to_trash_error_msg of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :rtype: str
        """
        return self._move_to_trash_error_msg

    @move_to_trash_error_msg.setter
    def move_to_trash_error_msg(self, move_to_trash_error_msg):
        """Sets the move_to_trash_error_msg of this ItemDomainMachineDesignAllOf.


        :param move_to_trash_error_msg: The move_to_trash_error_msg of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :type: str
        """

        self._move_to_trash_error_msg = move_to_trash_error_msg

    @property
    def move_to_trash_warning_msg(self):
        """Gets the move_to_trash_warning_msg of this ItemDomainMachineDesignAllOf.  # noqa: E501


        :return: The move_to_trash_warning_msg of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :rtype: str
        """
        return self._move_to_trash_warning_msg

    @move_to_trash_warning_msg.setter
    def move_to_trash_warning_msg(self, move_to_trash_warning_msg):
        """Sets the move_to_trash_warning_msg of this ItemDomainMachineDesignAllOf.


        :param move_to_trash_warning_msg: The move_to_trash_warning_msg of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :type: str
        """

        self._move_to_trash_warning_msg = move_to_trash_warning_msg

    @property
    def alternate_name(self):
        """Gets the alternate_name of this ItemDomainMachineDesignAllOf.  # noqa: E501


        :return: The alternate_name of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :rtype: str
        """
        return self._alternate_name

    @alternate_name.setter
    def alternate_name(self, alternate_name):
        """Sets the alternate_name of this ItemDomainMachineDesignAllOf.


        :param alternate_name: The alternate_name of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :type: str
        """

        self._alternate_name = alternate_name

    @property
    def assigned_item(self):
        """Gets the assigned_item of this ItemDomainMachineDesignAllOf.  # noqa: E501


        :return: The assigned_item of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :rtype: Item
        """
        return self._assigned_item

    @assigned_item.setter
    def assigned_item(self, assigned_item):
        """Sets the assigned_item of this ItemDomainMachineDesignAllOf.


        :param assigned_item: The assigned_item of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :type: Item
        """

        self._assigned_item = assigned_item

    @property
    def is_housed(self):
        """Gets the is_housed of this ItemDomainMachineDesignAllOf.  # noqa: E501


        :return: The is_housed of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._is_housed

    @is_housed.setter
    def is_housed(self, is_housed):
        """Sets the is_housed of this ItemDomainMachineDesignAllOf.


        :param is_housed: The is_housed of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :type: bool
        """

        self._is_housed = is_housed

    @property
    def status_property_type_name(self):
        """Gets the status_property_type_name of this ItemDomainMachineDesignAllOf.  # noqa: E501


        :return: The status_property_type_name of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :rtype: str
        """
        return self._status_property_type_name

    @status_property_type_name.setter
    def status_property_type_name(self, status_property_type_name):
        """Sets the status_property_type_name of this ItemDomainMachineDesignAllOf.


        :param status_property_type_name: The status_property_type_name of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :type: str
        """

        self._status_property_type_name = status_property_type_name

    @property
    def assigned_represented_element(self):
        """Gets the assigned_represented_element of this ItemDomainMachineDesignAllOf.  # noqa: E501


        :return: The assigned_represented_element of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :rtype: ItemElement
        """
        return self._assigned_represented_element

    @assigned_represented_element.setter
    def assigned_represented_element(self, assigned_represented_element):
        """Sets the assigned_represented_element of this ItemDomainMachineDesignAllOf.


        :param assigned_represented_element: The assigned_represented_element of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :type: ItemElement
        """

        self._assigned_represented_element = assigned_represented_element

    @property
    def move_to_trash_row_style(self):
        """Gets the move_to_trash_row_style of this ItemDomainMachineDesignAllOf.  # noqa: E501


        :return: The move_to_trash_row_style of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :rtype: str
        """
        return self._move_to_trash_row_style

    @move_to_trash_row_style.setter
    def move_to_trash_row_style(self, move_to_trash_row_style):
        """Sets the move_to_trash_row_style of this ItemDomainMachineDesignAllOf.


        :param move_to_trash_row_style: The move_to_trash_row_style of this ItemDomainMachineDesignAllOf.  # noqa: E501
        :type: str
        """

        self._move_to_trash_row_style = move_to_trash_row_style

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemDomainMachineDesignAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemDomainMachineDesignAllOf):
            return True

        return self.to_dict() != other.to_dict()
