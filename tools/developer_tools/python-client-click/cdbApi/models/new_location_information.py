# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.12.3
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class NewLocationInformation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'parent_location_id': 'int',
        'location_name': 'str',
        'location_qr_id': 'int',
        'location_type': 'str',
        'location_description': 'str',
        'sort_order': 'float'
    }

    attribute_map = {
        'parent_location_id': 'parentLocationId',
        'location_name': 'locationName',
        'location_qr_id': 'locationQrId',
        'location_type': 'locationType',
        'location_description': 'locationDescription',
        'sort_order': 'sortOrder'
    }

    def __init__(self, parent_location_id=None, location_name=None, location_qr_id=None, location_type=None, location_description=None, sort_order=None, local_vars_configuration=None):  # noqa: E501
        """NewLocationInformation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._parent_location_id = None
        self._location_name = None
        self._location_qr_id = None
        self._location_type = None
        self._location_description = None
        self._sort_order = None
        self.discriminator = None

        if parent_location_id is not None:
            self.parent_location_id = parent_location_id
        if location_name is not None:
            self.location_name = location_name
        if location_qr_id is not None:
            self.location_qr_id = location_qr_id
        if location_type is not None:
            self.location_type = location_type
        if location_description is not None:
            self.location_description = location_description
        if sort_order is not None:
            self.sort_order = sort_order

    @property
    def parent_location_id(self):
        """Gets the parent_location_id of this NewLocationInformation.  # noqa: E501


        :return: The parent_location_id of this NewLocationInformation.  # noqa: E501
        :rtype: int
        """
        return self._parent_location_id

    @parent_location_id.setter
    def parent_location_id(self, parent_location_id):
        """Sets the parent_location_id of this NewLocationInformation.


        :param parent_location_id: The parent_location_id of this NewLocationInformation.  # noqa: E501
        :type: int
        """

        self._parent_location_id = parent_location_id

    @property
    def location_name(self):
        """Gets the location_name of this NewLocationInformation.  # noqa: E501


        :return: The location_name of this NewLocationInformation.  # noqa: E501
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this NewLocationInformation.


        :param location_name: The location_name of this NewLocationInformation.  # noqa: E501
        :type: str
        """

        self._location_name = location_name

    @property
    def location_qr_id(self):
        """Gets the location_qr_id of this NewLocationInformation.  # noqa: E501


        :return: The location_qr_id of this NewLocationInformation.  # noqa: E501
        :rtype: int
        """
        return self._location_qr_id

    @location_qr_id.setter
    def location_qr_id(self, location_qr_id):
        """Sets the location_qr_id of this NewLocationInformation.


        :param location_qr_id: The location_qr_id of this NewLocationInformation.  # noqa: E501
        :type: int
        """

        self._location_qr_id = location_qr_id

    @property
    def location_type(self):
        """Gets the location_type of this NewLocationInformation.  # noqa: E501


        :return: The location_type of this NewLocationInformation.  # noqa: E501
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this NewLocationInformation.


        :param location_type: The location_type of this NewLocationInformation.  # noqa: E501
        :type: str
        """

        self._location_type = location_type

    @property
    def location_description(self):
        """Gets the location_description of this NewLocationInformation.  # noqa: E501


        :return: The location_description of this NewLocationInformation.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this NewLocationInformation.


        :param location_description: The location_description of this NewLocationInformation.  # noqa: E501
        :type: str
        """

        self._location_description = location_description

    @property
    def sort_order(self):
        """Gets the sort_order of this NewLocationInformation.  # noqa: E501


        :return: The sort_order of this NewLocationInformation.  # noqa: E501
        :rtype: float
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this NewLocationInformation.


        :param sort_order: The sort_order of this NewLocationInformation.  # noqa: E501
        :type: float
        """

        self._sort_order = sort_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewLocationInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewLocationInformation):
            return True

        return self.to_dict() != other.to_dict()
