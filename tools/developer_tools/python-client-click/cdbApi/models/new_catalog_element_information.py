# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.12.3
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class NewCatalogElementInformation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'catalog_item_id': 'int',
        'part_name': 'str',
        'part_description': 'str'
    }

    attribute_map = {
        'catalog_item_id': 'catalogItemId',
        'part_name': 'partName',
        'part_description': 'partDescription'
    }

    def __init__(self, catalog_item_id=None, part_name=None, part_description=None, local_vars_configuration=None):  # noqa: E501
        """NewCatalogElementInformation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._catalog_item_id = None
        self._part_name = None
        self._part_description = None
        self.discriminator = None

        if catalog_item_id is not None:
            self.catalog_item_id = catalog_item_id
        if part_name is not None:
            self.part_name = part_name
        if part_description is not None:
            self.part_description = part_description

    @property
    def catalog_item_id(self):
        """Gets the catalog_item_id of this NewCatalogElementInformation.  # noqa: E501


        :return: The catalog_item_id of this NewCatalogElementInformation.  # noqa: E501
        :rtype: int
        """
        return self._catalog_item_id

    @catalog_item_id.setter
    def catalog_item_id(self, catalog_item_id):
        """Sets the catalog_item_id of this NewCatalogElementInformation.


        :param catalog_item_id: The catalog_item_id of this NewCatalogElementInformation.  # noqa: E501
        :type: int
        """

        self._catalog_item_id = catalog_item_id

    @property
    def part_name(self):
        """Gets the part_name of this NewCatalogElementInformation.  # noqa: E501


        :return: The part_name of this NewCatalogElementInformation.  # noqa: E501
        :rtype: str
        """
        return self._part_name

    @part_name.setter
    def part_name(self, part_name):
        """Sets the part_name of this NewCatalogElementInformation.


        :param part_name: The part_name of this NewCatalogElementInformation.  # noqa: E501
        :type: str
        """

        self._part_name = part_name

    @property
    def part_description(self):
        """Gets the part_description of this NewCatalogElementInformation.  # noqa: E501


        :return: The part_description of this NewCatalogElementInformation.  # noqa: E501
        :rtype: str
        """
        return self._part_description

    @part_description.setter
    def part_description(self, part_description):
        """Sets the part_description of this NewCatalogElementInformation.


        :param part_description: The part_description of this NewCatalogElementInformation.  # noqa: E501
        :type: str
        """

        self._part_description = part_description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewCatalogElementInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewCatalogElementInformation):
            return True

        return self.to_dict() != other.to_dict()
