# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.12.3
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class UserInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'username': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'middle_name': 'str',
        'email': 'str',
        'description': 'str',
        'user_group_list': 'list[UserGroup]',
        'user_role_list': 'list[UserRole]'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'middle_name': 'middleName',
        'email': 'email',
        'description': 'description',
        'user_group_list': 'userGroupList',
        'user_role_list': 'userRoleList'
    }

    def __init__(self, id=None, username=None, first_name=None, last_name=None, middle_name=None, email=None, description=None, user_group_list=None, user_role_list=None, local_vars_configuration=None):  # noqa: E501
        """UserInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._username = None
        self._first_name = None
        self._last_name = None
        self._middle_name = None
        self._email = None
        self._description = None
        self._user_group_list = None
        self._user_role_list = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.username = username
        self.first_name = first_name
        self.last_name = last_name
        if middle_name is not None:
            self.middle_name = middle_name
        if email is not None:
            self.email = email
        if description is not None:
            self.description = description
        if user_group_list is not None:
            self.user_group_list = user_group_list
        if user_role_list is not None:
            self.user_role_list = user_role_list

    @property
    def id(self):
        """Gets the id of this UserInfo.  # noqa: E501


        :return: The id of this UserInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserInfo.


        :param id: The id of this UserInfo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def username(self):
        """Gets the username of this UserInfo.  # noqa: E501


        :return: The username of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserInfo.


        :param username: The username of this UserInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and username is None:  # noqa: E501
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                username is not None and len(username) > 16):
            raise ValueError("Invalid value for `username`, length must be less than or equal to `16`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                username is not None and len(username) < 1):
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")  # noqa: E501

        self._username = username

    @property
    def first_name(self):
        """Gets the first_name of this UserInfo.  # noqa: E501


        :return: The first_name of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserInfo.


        :param first_name: The first_name of this UserInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and first_name is None:  # noqa: E501
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                first_name is not None and len(first_name) > 16):
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `16`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                first_name is not None and len(first_name) < 1):
            raise ValueError("Invalid value for `first_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserInfo.  # noqa: E501


        :return: The last_name of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserInfo.


        :param last_name: The last_name of this UserInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and last_name is None:  # noqa: E501
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                last_name is not None and len(last_name) > 16):
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `16`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                last_name is not None and len(last_name) < 1):
            raise ValueError("Invalid value for `last_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._last_name = last_name

    @property
    def middle_name(self):
        """Gets the middle_name of this UserInfo.  # noqa: E501


        :return: The middle_name of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this UserInfo.


        :param middle_name: The middle_name of this UserInfo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                middle_name is not None and len(middle_name) > 16):
            raise ValueError("Invalid value for `middle_name`, length must be less than or equal to `16`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                middle_name is not None and len(middle_name) < 0):
            raise ValueError("Invalid value for `middle_name`, length must be greater than or equal to `0`")  # noqa: E501

        self._middle_name = middle_name

    @property
    def email(self):
        """Gets the email of this UserInfo.  # noqa: E501


        :return: The email of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInfo.


        :param email: The email of this UserInfo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) > 64):
            raise ValueError("Invalid value for `email`, length must be less than or equal to `64`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                email is not None and len(email) < 0):
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `0`")  # noqa: E501

        self._email = email

    @property
    def description(self):
        """Gets the description of this UserInfo.  # noqa: E501


        :return: The description of this UserInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UserInfo.


        :param description: The description of this UserInfo.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) > 256):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                description is not None and len(description) < 0):
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def user_group_list(self):
        """Gets the user_group_list of this UserInfo.  # noqa: E501


        :return: The user_group_list of this UserInfo.  # noqa: E501
        :rtype: list[UserGroup]
        """
        return self._user_group_list

    @user_group_list.setter
    def user_group_list(self, user_group_list):
        """Sets the user_group_list of this UserInfo.


        :param user_group_list: The user_group_list of this UserInfo.  # noqa: E501
        :type: list[UserGroup]
        """

        self._user_group_list = user_group_list

    @property
    def user_role_list(self):
        """Gets the user_role_list of this UserInfo.  # noqa: E501


        :return: The user_role_list of this UserInfo.  # noqa: E501
        :rtype: list[UserRole]
        """
        return self._user_role_list

    @user_role_list.setter
    def user_role_list(self, user_role_list):
        """Sets the user_role_list of this UserInfo.


        :param user_role_list: The user_role_list of this UserInfo.  # noqa: E501
        :type: list[UserRole]
        """

        self._user_role_list = user_role_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserInfo):
            return True

        return self.to_dict() != other.to_dict()
