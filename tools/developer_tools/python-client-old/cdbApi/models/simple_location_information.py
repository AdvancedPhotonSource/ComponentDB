# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.12.3
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class SimpleLocationInformation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'locatable_item_id': 'int',
        'location_item_id': 'int',
        'location_details': 'str'
    }

    attribute_map = {
        'locatable_item_id': 'locatableItemId',
        'location_item_id': 'locationItemId',
        'location_details': 'locationDetails'
    }

    def __init__(self, locatable_item_id=None, location_item_id=None, location_details=None, local_vars_configuration=None):  # noqa: E501
        """SimpleLocationInformation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._locatable_item_id = None
        self._location_item_id = None
        self._location_details = None
        self.discriminator = None

        if locatable_item_id is not None:
            self.locatable_item_id = locatable_item_id
        if location_item_id is not None:
            self.location_item_id = location_item_id
        if location_details is not None:
            self.location_details = location_details

    @property
    def locatable_item_id(self):
        """Gets the locatable_item_id of this SimpleLocationInformation.  # noqa: E501


        :return: The locatable_item_id of this SimpleLocationInformation.  # noqa: E501
        :rtype: int
        """
        return self._locatable_item_id

    @locatable_item_id.setter
    def locatable_item_id(self, locatable_item_id):
        """Sets the locatable_item_id of this SimpleLocationInformation.


        :param locatable_item_id: The locatable_item_id of this SimpleLocationInformation.  # noqa: E501
        :type: int
        """

        self._locatable_item_id = locatable_item_id

    @property
    def location_item_id(self):
        """Gets the location_item_id of this SimpleLocationInformation.  # noqa: E501


        :return: The location_item_id of this SimpleLocationInformation.  # noqa: E501
        :rtype: int
        """
        return self._location_item_id

    @location_item_id.setter
    def location_item_id(self, location_item_id):
        """Sets the location_item_id of this SimpleLocationInformation.


        :param location_item_id: The location_item_id of this SimpleLocationInformation.  # noqa: E501
        :type: int
        """

        self._location_item_id = location_item_id

    @property
    def location_details(self):
        """Gets the location_details of this SimpleLocationInformation.  # noqa: E501


        :return: The location_details of this SimpleLocationInformation.  # noqa: E501
        :rtype: str
        """
        return self._location_details

    @location_details.setter
    def location_details(self, location_details):
        """Sets the location_details of this SimpleLocationInformation.


        :param location_details: The location_details of this SimpleLocationInformation.  # noqa: E501
        :type: str
        """

        self._location_details = location_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleLocationInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SimpleLocationInformation):
            return True

        return self.to_dict() != other.to_dict()
