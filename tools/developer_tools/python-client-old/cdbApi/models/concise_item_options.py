# coding: utf-8

"""
    Component Database API

    The API that provides access to Component Database data.  # noqa: E501

    The version of the OpenAPI document: 3.12.3
    Contact: djarosz@anl.gov
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cdbApi.configuration import Configuration


class ConciseItemOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'include_derived_from_item_info': 'bool',
        'include_item_project_id_list': 'bool',
        'include_item_type_id_list': 'bool',
        'include_item_category_id_list': 'bool',
        'include_primary_image_for_item': 'bool'
    }

    attribute_map = {
        'include_derived_from_item_info': 'includeDerivedFromItemInfo',
        'include_item_project_id_list': 'includeItemProjectIdList',
        'include_item_type_id_list': 'includeItemTypeIdList',
        'include_item_category_id_list': 'includeItemCategoryIdList',
        'include_primary_image_for_item': 'includePrimaryImageForItem'
    }

    def __init__(self, include_derived_from_item_info=None, include_item_project_id_list=None, include_item_type_id_list=None, include_item_category_id_list=None, include_primary_image_for_item=None, local_vars_configuration=None):  # noqa: E501
        """ConciseItemOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._include_derived_from_item_info = None
        self._include_item_project_id_list = None
        self._include_item_type_id_list = None
        self._include_item_category_id_list = None
        self._include_primary_image_for_item = None
        self.discriminator = None

        if include_derived_from_item_info is not None:
            self.include_derived_from_item_info = include_derived_from_item_info
        if include_item_project_id_list is not None:
            self.include_item_project_id_list = include_item_project_id_list
        if include_item_type_id_list is not None:
            self.include_item_type_id_list = include_item_type_id_list
        if include_item_category_id_list is not None:
            self.include_item_category_id_list = include_item_category_id_list
        if include_primary_image_for_item is not None:
            self.include_primary_image_for_item = include_primary_image_for_item

    @property
    def include_derived_from_item_info(self):
        """Gets the include_derived_from_item_info of this ConciseItemOptions.  # noqa: E501


        :return: The include_derived_from_item_info of this ConciseItemOptions.  # noqa: E501
        :rtype: bool
        """
        return self._include_derived_from_item_info

    @include_derived_from_item_info.setter
    def include_derived_from_item_info(self, include_derived_from_item_info):
        """Sets the include_derived_from_item_info of this ConciseItemOptions.


        :param include_derived_from_item_info: The include_derived_from_item_info of this ConciseItemOptions.  # noqa: E501
        :type: bool
        """

        self._include_derived_from_item_info = include_derived_from_item_info

    @property
    def include_item_project_id_list(self):
        """Gets the include_item_project_id_list of this ConciseItemOptions.  # noqa: E501


        :return: The include_item_project_id_list of this ConciseItemOptions.  # noqa: E501
        :rtype: bool
        """
        return self._include_item_project_id_list

    @include_item_project_id_list.setter
    def include_item_project_id_list(self, include_item_project_id_list):
        """Sets the include_item_project_id_list of this ConciseItemOptions.


        :param include_item_project_id_list: The include_item_project_id_list of this ConciseItemOptions.  # noqa: E501
        :type: bool
        """

        self._include_item_project_id_list = include_item_project_id_list

    @property
    def include_item_type_id_list(self):
        """Gets the include_item_type_id_list of this ConciseItemOptions.  # noqa: E501


        :return: The include_item_type_id_list of this ConciseItemOptions.  # noqa: E501
        :rtype: bool
        """
        return self._include_item_type_id_list

    @include_item_type_id_list.setter
    def include_item_type_id_list(self, include_item_type_id_list):
        """Sets the include_item_type_id_list of this ConciseItemOptions.


        :param include_item_type_id_list: The include_item_type_id_list of this ConciseItemOptions.  # noqa: E501
        :type: bool
        """

        self._include_item_type_id_list = include_item_type_id_list

    @property
    def include_item_category_id_list(self):
        """Gets the include_item_category_id_list of this ConciseItemOptions.  # noqa: E501


        :return: The include_item_category_id_list of this ConciseItemOptions.  # noqa: E501
        :rtype: bool
        """
        return self._include_item_category_id_list

    @include_item_category_id_list.setter
    def include_item_category_id_list(self, include_item_category_id_list):
        """Sets the include_item_category_id_list of this ConciseItemOptions.


        :param include_item_category_id_list: The include_item_category_id_list of this ConciseItemOptions.  # noqa: E501
        :type: bool
        """

        self._include_item_category_id_list = include_item_category_id_list

    @property
    def include_primary_image_for_item(self):
        """Gets the include_primary_image_for_item of this ConciseItemOptions.  # noqa: E501


        :return: The include_primary_image_for_item of this ConciseItemOptions.  # noqa: E501
        :rtype: bool
        """
        return self._include_primary_image_for_item

    @include_primary_image_for_item.setter
    def include_primary_image_for_item(self, include_primary_image_for_item):
        """Sets the include_primary_image_for_item of this ConciseItemOptions.


        :param include_primary_image_for_item: The include_primary_image_for_item of this ConciseItemOptions.  # noqa: E501
        :type: bool
        """

        self._include_primary_image_for_item = include_primary_image_for_item

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConciseItemOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConciseItemOptions):
            return True

        return self.to_dict() != other.to_dict()
